#!/bin/bash
sudo echo Script started > /tmp/script.log
apt update
apt install -y docker docker-compose nginx expect
echo "qwerty" >> password.txt
mkdir validator_v
docker run -v /validator_v:/root/.ethereum -v /password.txt:/root/.ethereum/password.txt ethereum/client-go:v1.10.1 account new --password=/root/.ethereum/password.txt > addres.txt
export address=$(grep 'Public address of the key:'  addres.txt  | rev | cut -d'x'  -f 1,3 | rev)
mkdir genesis
export number=$RANDOM
cat <<EOT >> genesis.exp
#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Mar 27 16:52:45 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn docker run -it -v /genesis:/genesis ethereum/client-go:alltools-v1.10.1 puppeth
match_max 100000
expect -exact "> "
send -- "genesis\r"
expect -exact "> "
send -- "2\r"
expect -exact "> "
send -- "1\r"
expect -exact "> "
send -- "2\r"
expect -exact "> "
send -- "5\r"
expect -exact "> 0x"
send -- "$address\r"
expect -exact "$address"
expect -exact "> 0x"
send -- "\r"
expect -exact "> 0x"
send -- "$address\r"
expect -exact "$address"
expect -exact "> 0x"
send -- "\r"
expect -exact "> "
send -- "no\r"
expect -exact "> "
send -- "$number\r"
expect -exact "> "
send -- "2\r"
expect -exact "> "
send -- "2\r"
expect -exact "> "
send -- "genesis\r"
expect -exact "> "
break
expect eof

EOT
chmod +x genesis.exp
./genesis.exp &
PID=$!
sleep 20s
kill $PID


docker run -v /validator_v:/root/.ethereum -v /genesis/genesis.json:/genesis.json ethereum/client-go:v1.10.1 init genesis.json 

docker run -v /validator_v:/root/.ethereum -v /password.txt:/root/.ethereum/password.txt -p 8545:8545 -p 30303:30303 ethereum/client-go:v1.10.1 --unlock=$address --password=/root/.ethereum/password.txt --mine --miner.threads=1 --syncmode=full --networkid=$number --miner.etherbase=$address --http.api=net,web3,eth,debug --http.corsdomain=* --http --http.addr=0.0.0.0 --allow-insecure-unlock &
cd /
mkdir keys
cp -r /validator_v/keystore /keys
chown -R ubuntu /keys;
chown -R ubuntu /addres.txt;

rm /etc/nginx/sites-enabled/default
cat <<EOT >> /etc/nginx/sites-enabled/nft
server {

    server_name  nft-auction.tk;
    location / {
        proxy_pass http://127.0.0.1:81;
    }
}

EOT

systemctl restart nginx.service